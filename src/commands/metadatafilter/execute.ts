import { Command, flags } from '@oclif/command'

export default class ExecuteFilter extends Command {
  static description = `Allows to filter metadatas folder generated by sfdx force:source:convert , using your own package.xml
  
  Metadata types currently managed:

  - ApexClass
  - ApexComponent
  - ApexPage
  - ApexTrigger
  - AuraDefinitionBundle
  - CustomApplication
  - CustomLabel
  - CustomMetadata
  - CustomObject
  - CustomObjectTranslation
  - CustomTab
  - Document
  - EmailTemplate
  - EscalationRules
  - FlexiPage
  - GlobalValueSet
  - GlobalValueSetTranslation
  - HomePageLayout
  - Layout
  - NamedCredential
  - PermissionSet
  - Profile
  - QuickAction
  - RemoteSiteSetting
  - Report
  - StandardValueSet
  - StaticResource
  - Translations
  - Workflow
  `

  static examples = [
    `$ sfdx metadatafilter:execute -p myPackage.xml`,
    `$ sfdx metadatafilter:execute -i md_api_output_dir -p myPackage.xml -o md_api_filtered_output_dir`,
  ]

  static flags = {
    // flag with a value (-n, --name=VALUE)
    packagexml: flags.string({ char: 'p', description: 'package.xml file path' }),
    inputfolder: flags.string({ char: 'i', description: 'Input folder (default: "." )' }),
    outputfolder: flags.string({ char: 'o', description: 'Output folder (default: filteredMetadatas)' })
  }

  static args = []

  // Input params properties
  packageXmlFile
  inputFolder
  outputFolder

  // Internal properties
  packageXmlMetadatasTypeLs = []
  summaryResult = { metadataTypes: {} }

  async run() {
    var fs = require('fs'),
      fse = require('fs-extra'),
      xml2js = require('xml2js'),
      util = require('util');

    const { args, flags } = this.parse(ExecuteFilter)

    // Get input arguments or default values
    this.packageXmlFile = flags.packagexml
    this.inputFolder = flags.inputfolder || '.'
    this.outputFolder = flags.outputfolder || 'filteredMetadatas'
    this.log(`Initialize filtering of ${this.inputFolder} ,using ${this.packageXmlFile} , into ${this.outputFolder}`)

    // Read package.xml file
    var parser = new xml2js.Parser();
    var self = this
    fs.readFile(this.packageXmlFile, function (err, data) {
      parser.parseString(data, function (err2, result) {
        console.log(`Parsed package.xml \n` + util.inspect(result, false, null))

        // get metadata types in parse result
        try { self.packageXmlMetadatasTypeLs = result.Package.types }
        catch { throw 'Unable to parse packageXml file ' + self.packageXmlFile }

        // Create output folder/empty it if existing
        if (fs.existsSync(self.outputFolder)) {
          console.log('Empty target directory')
          fse.emptyDirSync(self.outputFolder);
        }
        else {
          fs.mkdirSync(self.outputFolder)
        }

        // Process source folder filtering and copy files into target folder
        self.filterMetadatasByType()
        self.displayResults()
      });
    });

  }

  // Filter metadatas by type
  filterMetadatasByType() {
    var fs = require('fs')
    const fse = require('fs-extra')
    var path = require('path')
    var self = this
    this.packageXmlMetadatasTypeLs.forEach(function (metadataDefinition) {
      var metadataType = metadataDefinition.name
      var members = metadataDefinition.members

      self.summaryResult.metadataTypes[metadataType] = { 'nbCopied': 0 }
      // Get metadata description
      var metadataDesc = self.getMetadataTypeDescription(metadataType)
      if (metadataDesc == null) {
        return
      }

      // Browse folder for matching files and copy them into target folder
      var typeInputFolder = self.inputFolder + '/' + metadataDesc.folder
      console.log(`- processing ${metadataType}`)
      if (fs.existsSync(typeInputFolder)) {
        var typeOutputFolder = self.outputFolder + '/' + metadataDesc.folder
        if (members != null && members[0] === '*') {
          // Wildcard: copy whole folder
          fse.copySync(typeInputFolder, typeOutputFolder)
        }
        else {
          // Create member folder in output folder
          fs.mkdirSync(typeOutputFolder)

          // Iterate all metadata types members (ApexClass,ApexComponent,etc...)
          members.forEach(function (member) {
            // Iterate all possible extensions ( '' for same file/folder name, '.cls' for ApexClass, etc ...)
            metadataDesc.nameSuffixList.forEach(function (nameSuffix) {
              // If input file/folder exists, copy it in output folder
              var sourceFile = typeInputFolder + '/' + member + nameSuffix
              if (fs.existsSync(sourceFile)) {
                var copyTargetFile = typeOutputFolder + '/' + member + nameSuffix
                fse.copySync(sourceFile, copyTargetFile)
                // Increment counter only when file is not meta-xml
                if (!sourceFile.endsWith('meta-xml')) {
                  self.summaryResult.metadataTypes[metadataType]['nbCopied']++
                }
              }
            })
          })

        }
      }
    });
  }


  // Describe packageXml <=> metadata folder correspondance
  describeMetadataTypes() {

    // folder is the corresponding folder in metadatas folder 
    // nameSuffixList are the files and/or folder names , built from the name of the package.xml item ( in <members> )

    const metadataTypesDescription = {
      'ApexClass': { folder: 'classes', nameSuffixList: ['.cls', '.cls-meta.xml'] },
      'ApexComponent': { folder: 'components', nameSuffixList: ['.component', '.component-meta.xml'] },
      'ApexPage': { folder: 'pages', nameSuffixList: ['.page', '.page-meta.xml'] },
      'ApexTrigger': { folder: 'triggers', nameSuffixList: ['.trigger', '.trigger-meta.xml'] },
      'AuraDefinitionBundle': { folder: 'aura', nameSuffixList: [''] },
      'CustomApplication': { folder: 'applications', nameSuffixList: ['.app'] },
      'CustomLabel': { folder: 'labels', nameSuffixList: [''] },
      'CustomMetadata': { folder: 'customMetadata', nameSuffixList: ['.md'] },
      'CustomObject': { folder: 'objects', nameSuffixList: ['.object'] },
      'CustomObjectTranslation': { folder: 'objectTranslations', nameSuffixList: ['.objectTranslation'] },
      'CustomTab': { folder: 'tabs', nameSuffixList: ['.tab'] },
      'Document': { folder: 'documents', nameSuffixList: ['', '-meta.xml'] },
      'EmailTemplate': { folder: 'email', nameSuffixList: ['', '-meta.xml'] },
      'EscalationRules': { folder: 'escalationRules', nameSuffixList: ['.escalationRules'] },
      'FlexiPage': { folder: 'flexipages', nameSuffixList: ['.flexipage'] },
      'GlobalValueSet': { folder: 'globalValueSets', nameSuffixList: ['.globalValueSet'] },
      'GlobalValueSetTranslation': { folder: 'globalValueSetTranslations', nameSuffixList: ['..globalValueSetTranslation'] },
      'HomePageLayout': { folder: 'homePageLayouts', nameSuffixList: ['.homePageLayout'] },
      'Layout': { folder: 'layouts', nameSuffixList: ['.layout'] },
      'NamedCredential': { folder: 'namedCredentials', nameSuffixList: ['.namedCredential'] },
      'PermissionSet': { folder: 'permissionsets', nameSuffixList: ['.permissionset'] },
      'Profile': { folder: 'profiles', nameSuffixList: ['.profile'] },
      'QuickAction': { folder: 'quickActions', nameSuffixList: ['.quickAction'] },
      'RemoteSiteSetting': { folder: 'remoteSiteSettings', nameSuffixList: ['.remoteSite'] },
      'Report': { folder: 'reports', nameSuffixList: ['', '-meta.xml'] },
      'StandardValueSet': { folder: 'standardValueSets', nameSuffixList: ['.standardValueSet'] },
      'StaticResource': { folder: 'staticresources', nameSuffixList: ['.resource', '.resource-meta.xml'] },
      'Translations': { folder: 'translations', nameSuffixList: ['.translation'] },
      'Workflow': { folder: 'workflows', nameSuffixList: ['.workflow'] }

      // Not taken in account yet list : BusinessProcess, CustomField , ListView , RecordType , WebLink

    }
    return metadataTypesDescription
  }

  // get Metadatype description
  getMetadataTypeDescription(md_type) {
    var desc = this.describeMetadataTypes()[md_type]
    return desc
  }

  // Display results as JSON
  displayResults() {
    const util = require('util');
    console.log(util.inspect(this.summaryResult, false, null))
  }


}